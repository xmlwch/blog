<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on xmlwch的博客</title>
    <link>https://blog.xmlwch.cn/tags/Linux/</link>
    <description>Recent content in Linux on xmlwch的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 28 Sep 2022 10:40:00 +0800</lastBuildDate><atom:link href="https://blog.xmlwch.cn/tags/Linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[转]彻底搞懂「一切皆文件」的UNIX哲学</title>
      <link>https://blog.xmlwch.cn/2022/09/28/chlinux/everything-is-a-file.md.html</link>
      <pubDate>Wed, 28 Sep 2022 10:40:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2022/09/28/chlinux/everything-is-a-file.md.html</guid>
      <description>原文地址：彻底搞懂「一切皆文件」的UNIX哲学 作者： uianster 一、UINX哲学 一切皆文件是 Unix/Linux 的基本哲学之一。不仅普通的文件，目录、字符设备、块设备、 套接字等在 Unix/Linux 中都是以文件被对待；它们虽然类型不同，但是对其提供的却是同一套操作界面。 二、UNIX文件类型 下面列举了UNIX中常用到的文件类型</description>
    </item>
    
    <item>
      <title>Linux 文件系统</title>
      <link>https://blog.xmlwch.cn/2022/09/27/chlinux/system-contents.html</link>
      <pubDate>Tue, 27 Sep 2022 15:40:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2022/09/27/chlinux/system-contents.html</guid>
      <description>一、概要 文件系统是操作系统用于明确存储设备（常见的是磁盘，也有基于NAND Flash的固态硬盘 也有虚拟的文件系统(vmfs))，说白了就是操作系统或软件对文件在存储设备上的一种组织、管理方式。 而根据文件系统类型分类： windows属于多根目录文件系统。 linux属于根目录文件系统</description>
    </item>
    
    <item>
      <title>修改系统时间</title>
      <link>https://blog.xmlwch.cn/2022/09/15/chlinux/os-time.html</link>
      <pubDate>Thu, 15 Sep 2022 11:40:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2022/09/15/chlinux/os-time.html</guid>
      <description>查看当前系统时间 date 修改当前系统时间 date -s &amp;quot;2018-2-22 19:10:30 查看硬件时间 hwclock --show 修改硬件时间 hwclock --set --date &amp;quot;2018-2-22 19:10:30&amp;quot; 同步系统时间和硬件时间 hwclock --hctosys 保存时钟 clock -w 重启系统（init 6）后便发现系统时间被修改了 （完）</description>
    </item>
    
    <item>
      <title>开机自动挂载samba目录</title>
      <link>https://blog.xmlwch.cn/2021/11/14/chlinux/auto-mount-smb.html</link>
      <pubDate>Fri, 14 Jan 2022 16:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/11/14/chlinux/auto-mount-smb.html</guid>
      <description>一：临时挂载 mount -t cifs //10.0.0.7/data_test /data_test -o username=yourname,password=yourpwd,gid=0,uid=0 gid和uid可以通过输入命令id 用户名，比如查看root的，就是输入id root；如果是查看git的，就是输入id git 可以用命令行方式卸载： umount:/data_test 二：开机自动挂载 1.创建登陆凭证： 新建一个文件/etc/smbpasswd 这个凭证的文件名可以自定义，相应的2中</description>
    </item>
    
    <item>
      <title>KVM 使用 | 在 Centos 8 中创建桥接网卡</title>
      <link>https://blog.xmlwch.cn/2021/09/13/chlinux/create-bridge-network.html</link>
      <pubDate>Mon, 13 Sep 2021 13:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/09/13/chlinux/create-bridge-network.html</guid>
      <description>请确保用户有访问服务器显示器的权限，不然出错ssh连接不上。 1 创建网桥 br0 设备 nmcli c add type bridge con-name br0 ifname br0 autoconnect yes 2 网桥 br0 桥接到 eth0 设备（请自己替换自己的设备名） nmcli c add type bridge-slave ifname eth0 master br0 3 查看配置是否成功自动创建了配置文件 ls /etc/sysconfig/network-scripts/ifcfg-br* ifcfg-br0 ifcfg-bridge-slave-eth0 4 将原来的网卡，设置为开启不启动 vi /etc/sysconfig/network-scripts/ifcfg-eth0 #将ONBOOT=yes 改成ONBOO</description>
    </item>
    
    <item>
      <title>KVM 使用 | 在kp920机器上使用KVM虚拟机</title>
      <link>https://blog.xmlwch.cn/2021/09/07/chlinux/use-kvm-on-kp920.html</link>
      <pubDate>Tue, 07 Sep 2021 13:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/09/07/chlinux/use-kvm-on-kp920.html</guid>
      <description>说明 本文所提及的方法仅供参考学习，请尊重网络资源原作者的劳动成果，尊重知识版权，合法取得资料使用权。 宿主机（物理机）： 机器配置： CPU：8核 鲲鹏920 / 内存：16G / 硬盘：1T 操作系统：银河麒麟v10（Arm版本） 系统镜像： Kylin-Server-10-SP1-Release-Build20-20210518-aarch64.iso 虚拟机： 虚拟配置：内存：4G / 硬盘：320G 操作系统：</description>
    </item>
    
    <item>
      <title>查看 SELinux状态及关闭SELinux</title>
      <link>https://blog.xmlwch.cn/2021/09/02/chlinux/selinux.html</link>
      <pubDate>Thu, 02 Sep 2021 15:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/09/02/chlinux/selinux.html</guid>
      <description>查看SELinux状态： ## 如果SELinux status参数为enabled即为开启状态 /usr/sbin/sestatus -v SELinux status: enabled ... ## 也可以用这个命令检查 getenforce 关闭SELinux： ## 临时关闭（不用重启机器） setenforce 0 ##设置SELinux 成为permissive模式 #setenforce 1 设置SELinux 成为enforcing模式 ## 永久关</description>
    </item>
    
    <item>
      <title>systemd详解</title>
      <link>https://blog.xmlwch.cn/2021/08/05/chlinux/systemd.html</link>
      <pubDate>Thu, 05 Aug 2021 11:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/08/05/chlinux/systemd.html</guid>
      <description>说明 systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置；主要用于服务管理和自定义服务的管理，方便运维工作管理。 systemctl systemctl是 Systemd 的主命令，用于管理系统 # 重启系统 sudo systemctl reboot # 关闭系统，切断电源 sudo systemctl poweroff # CPU停止工作 sudo systemctl halt # 暂停系统 sudo systemctl suspend # 让系统进入冬眠状态 sudo systemctl hibernate # 让系</description>
    </item>
    
    <item>
      <title> Vagrantfile详解</title>
      <link>https://blog.xmlwch.cn/2021/07/21/chlinux/vagrantfile.html</link>
      <pubDate>Wed, 21 Jul 2021 15:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/07/21/chlinux/vagrantfile.html</guid>
      <description>## vagrantfile详解 # 定义虚拟机的各种配置，主要包括三个方面的配置：虚拟机的配置、SSH配置、Vagrant的一些基础配置。 # Vagrant是使用Ruby开发的，所以它的配置语法也是Ruby的，每个项目都需要有一个Vagrantfile，在执行vagrant init xxx 的目录下可</description>
    </item>
    
    <item>
      <title> Docker Compose 模板文件</title>
      <link>https://blog.xmlwch.cn/2021/07/16/chlinux/docker-compose-yml.html</link>
      <pubDate>Fri, 16 Jul 2021 15:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/07/16/chlinux/docker-compose-yml.html</guid>
      <description>Docker Compose 跟 Dockerfile 类似的文件是 docker-compose.yml 根据后缀我们知道使用的是 YAML 语法； version docker-compose.yml 的第一行是用来定义版本的； 允许的值我们可以从官网查询；https://docs.docker.com/compose/compose-file version: &amp;#34;3.7&amp;#34; service 定义完版本接下来就是 service 了； service 部分是我们的核心；定义了要使用那些服务； version:&amp;#34;3.7&amp;#34;services:redis:# 服务</description>
    </item>
    
    <item>
      <title> Docker简单使用</title>
      <link>https://blog.xmlwch.cn/2021/07/08/chlinux/docker.html</link>
      <pubDate>Thu, 08 Jul 2021 15:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/07/08/chlinux/docker.html</guid>
      <description>Docker常见命令 容器相关操作 docker create # 创建一个容器但是不启动它 docker run # 创建并启动一个容器 docker stop # 停止容器运行，发送信号SIGTERM docker start # 启动一个停止状态的容器 docker restart # 重启一个容器 docker rm # 删除一个容器 docker kill # 发送信号给容器，默认SIGKILL docker attach # 连接(进入)到一个正在运行的容器 docker wait # 阻塞</description>
    </item>
    
    <item>
      <title>Supervisord 使用</title>
      <link>https://blog.xmlwch.cn/2021/07/06/chlinux/supervisord.html</link>
      <pubDate>Tue, 06 Jul 2021 15:00:00 +0800</pubDate>
      
      <guid>https://blog.xmlwch.cn/2021/07/06/chlinux/supervisord.html</guid>
      <description>0.Supervisor说明 Supervisor（http://supervisord.org/）是用Python开发的一个client/server服务，是Linux/Unix系统下的一个进程管理工具，不支持Windows系统。它可以很方便的监听、启动、停止、重启一个或多个进程</description>
    </item>
    
  </channel>
</rss>
